@using Microsoft.AspNetCore.Html
@model EntityFrameworkCoreDemo.Models.ViewModel.CompCvVM

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>CompCvVM</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.CvId, new { htmlAttributes = new { @class = "form-control" } })

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CountryId, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountyId, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CountyId, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CountyId, "", new { @class = "text-danger" })
            </div>
        </div>

        @for (var i = 0; i < Model.Educations.Count; i++)
        {
            @*@CustomHiddenId($"Educations[{i}].EducationId", Model.Educations[i].EducationId)*@
            <div class="form-group">
                @Html.Label(nameof(Model.Educations) + i, null, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input name="@($"Educations[{i}].AcademyName")" value="@(Model.Educations[i].AcademyName)" class="form-control" />
                </div>
            </div>
        }

        @for (var i = 0; i < Model.Certificates.Count; i++)
        {
            @*@CustomHiddenId($"Certificates[{i}].CertificateId",Model.Certificates[i].CertificateId)*@
            <div class="form-group">
                @Html.Label(nameof(Model.Certificates) + i, null, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input name="@($"Certificates[{i}].CertificateName")" value="@(Model.Certificates[i].CertificateName)" class="form-control" />
                </div>
            </div>
        }

        @for (var i = 0; i < Model.LanguageRequirements.Count; i++)
        {
            @CustomHiddenId($"LanguageRequirements[{i}].LanguageRequirementId",
                            Model.LanguageRequirements[i].LanguageRequirementId.ToString())
            <div class="form-group">
                @Html.Label($"Language{i}", null, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @CustomDropDownList($"LanguageRequirements[{i}].Language",
                        ViewBag.Language as IEnumerable<SelectListItem>,
                        Model.LanguageRequirements[i].Language.ToString())
                </div>
            </div>
            <div class="form-group">
                @Html.Label($"Listening{i}", null, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @CustomDropDownList($"LanguageRequirements[{i}].Listening",
                        ViewBag.Listening as IEnumerable<SelectListItem>,
                        Model.LanguageRequirements[i].Listening.ToString())
                </div>
            </div>
        }


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@functions
{
    public IHtmlContent CustomHiddenId(string name,string value)
    {
        var inputBuilder = new TagBuilder("input");
        inputBuilder.MergeAttribute("value", value);
        inputBuilder.Attributes.Add("type", "hidden");
        inputBuilder.Attributes.Add("name", name);
        return inputBuilder;
    }

    public IHtmlContent CustomDropDownList(string name, IEnumerable<SelectListItem> options, string selectedValue)
    {
        var selectBuilder = new TagBuilder("select");
        selectBuilder.Attributes.Add("name", name);

        foreach (var option in options)
        {
            var optionsBuilder = new TagBuilder("option");
            optionsBuilder.MergeAttribute("value", option.Value);
            optionsBuilder.InnerHtml.Append(option.Text);

            if(option.Value == selectedValue)
                optionsBuilder.Attributes.Add("selected", "selected");

            selectBuilder.InnerHtml.AppendHtml(optionsBuilder);
        }

        return selectBuilder;
    }
}